/**
 * Core method of the application. It is used to generate value for each cell of the sudoku.
 * The method uses the Backtracking algorithm.
 * 
 * @param row
 * The row where the generated values need to be populated.
 * @param column
 * The column where the generated values need to be populated.
 * @return
 */
private boolean start(int row, int column) {
	if (row > 8 || column > 8) {
		return true;
	}
	List<Integer> potentialValues = getPotentialValues(row, column);
	while(true) {
		if (potentialValues.size() <= 0) {
			// No potential values means there needs a backtracking process to recalculate the sudoku.
			sudoku[row][column].setValue(0);
			return false;
		} else {
			// Randomly pick a value from potential values.
			int value = getValue(potentialValues);
			sudoku[row][column].setValue(value);
			boolean success = false;
			// Populate value to each cell. The column takes priority.
			if (column == 8) {
				success = start(row + 1, 0);
			} else {
				success = start(row, column + 1);
			}
			if (success == true) {
				// The calculation for one route comes to an end successfully.
				return true;
			} else {
				// The calculation for one route fails. Remove the value from the pool of potential values and start it over.
				potentialValues.remove(value);
			}
		}
	}
}

/**
 * Get potential values when attempting to populate a specific cell.
 * The value of one cell depends on the values around it.
 * 
 * @param row
 * The row of the cell.
 * @param column
 * The column of the cell.
 * @return
 */
private List<Integer> getPotentialValues(int row, int column) {
	List<Integer> list = new ArrayList<Integer>();
	for (int i = 1;i <= 9;i++) {
		list.add(i);
	}
	// One column must not have duplicated values.
	for (int i = 0;i < 9;i++) {
		if (i == column || sudoku[row][i].getValue() == 0) {
			continue;
		} else {
			list.remove(sudoku[row][i].getValue());
		}
	}
	if (list.size() <= 0) {
		return list;
	}
	// One row must not have duplicated values.
	for (int i = 0;i < 9;i++) {
		if (i == row || sudoku[i][column].getValue() == 0) {
			continue;
		} else {
			list.remove(sudoku[i][column].getValue());
		}
	}
	if (list.size() <= 0) {
		return list;
	}
	// One sudoku must not have duplicated values.
	int rowStart = row / 3 * 3;
	int colStart = column / 3 * 3;
	for (int i = rowStart;i < rowStart + 3;i++) {
		for (int j = colStart;j < colStart + 3;j++) {
			if (i == row && j == column || sudoku[i][j].getValue() == 0) {
				continue;
			} else {
				list.remove(sudoku[i][j].getValue());
			}
		}
	}
	return list;
}
